// <auto-generated />
using System;
using DA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DA.Migrations
{
    [DbContext(typeof(ContextoDeBasedeDatos))]
    [Migration("20230214020820_actualizada")]
    partial class actualizada
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Modelo.Presentacion", b =>
                {
                    b.Property<int>("id_presentacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id_presentacion");

                    b.ToTable("Presentacion");
                });

            modelBuilder.Entity("Modelo.Producto", b =>
                {
                    b.Property<int>("id_producto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("codigo_producto")
                        .HasColumnType("int");

                    b.Property<int>("id_presentacion")
                        .HasColumnType("int");

                    b.Property<int>("id_unidad")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("precio_venta")
                        .HasColumnType("float");

                    b.HasKey("id_producto");

                    b.HasIndex("id_presentacion");

                    b.HasIndex("id_unidad");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Modelo.ProductoProveedores", b =>
                {
                    b.Property<int>("id_proveedores")
                        .HasColumnType("int");

                    b.Property<int>("id_producto")
                        .HasColumnType("int");

                    b.Property<int>("id_proveedor")
                        .HasColumnType("int");

                    b.Property<double>("precio")
                        .HasColumnType("double");

                    b.HasKey("id_proveedores", "id_producto");

                    b.HasIndex("id_producto");

                    b.HasIndex("id_proveedor");

                    b.ToTable("ProductoProveedores");
                });

            modelBuilder.Entity("Modelo.Proveedores", b =>
                {
                    b.Property<int>("id_proveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cedula_juridica")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id_proveedor");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("Modelo.Roles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Modelo.Unidad_Medida", b =>
                {
                    b.Property<int>("id_unidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id_unidad");

                    b.ToTable("Unidad_Medida");
                });

            modelBuilder.Entity("Modelo.user", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Id")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<string>("apellido1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("apellido2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("cedula")
                        .HasColumnType("int");

                    b.Property<string>("nombre1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nombre2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Modelo.Producto", b =>
                {
                    b.HasOne("Modelo.Presentacion", "Presentacion")
                        .WithMany()
                        .HasForeignKey("id_presentacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Unidad_Medida", "Unidad_Medida")
                        .WithMany()
                        .HasForeignKey("id_unidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Presentacion");

                    b.Navigation("Unidad_Medida");
                });

            modelBuilder.Entity("Modelo.ProductoProveedores", b =>
                {
                    b.HasOne("Modelo.Proveedores", "Proveedores")
                        .WithMany("ProductoProveedores")
                        .HasForeignKey("id_producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Producto", "Producto")
                        .WithMany("ProductoProveedores")
                        .HasForeignKey("id_proveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Modelo.Producto", b =>
                {
                    b.Navigation("ProductoProveedores");
                });

            modelBuilder.Entity("Modelo.Proveedores", b =>
                {
                    b.Navigation("ProductoProveedores");
                });
#pragma warning restore 612, 618
        }
    }
}
